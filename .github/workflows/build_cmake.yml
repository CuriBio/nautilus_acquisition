# MIT License
#
# Copyright (c) 2022 Curi Bio
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: CMake Build Matrix

on: [workflow_dispatch]

env:
  CMAKE_VERSION: 3.23.0
  NINJA_VERSION: 1.10.2
  BUILD_TYPE: Release
  CCACHE_VERSION: 4.6

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Nautilai Latest Windows MSVC",
              artifact: "Nautilai",
              os: windows-latest,
              cc: "cl",
              cxx: "cl",
              environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            }
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.3

      - name: Compile Local Analysis Executable
        shell: bash
        run: |
          cd src/local_analysis
          python -m venv la-venv
          ./la-venv/Scripts/Activate
          pip install -r src/requirements-dev.txt
          pip install -r src/requirements.txt
          pyinstaller -i app/icon/logo.ico -F --windowed src/local_analysis.py
          mv ./dist/local_analysis.exe ../../resources

      - name: Install on Mac/Linux/Windows
        shell: bash
        run: |
          pip3 install wheel setuptools
          pip3 install -r requirements.txt

      - name: Download Ninja and CMake
        shell: cmake -P {0}
        run: |
          set(cmake_version $ENV{CMAKE_VERSION})
          set(ninja_version $ENV{NINJA_VERSION})

          message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

          if ("${{ runner.os }}" STREQUAL "Windows")
            set(ninja_suffix "win.zip")
            set(cmake_suffix "windows-x86_64.zip")
            set(cmake_dir "cmake-${cmake_version}-windows-x86_64/bin")
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            set(ninja_suffix "linux.zip")
            set(cmake_suffix "linux-x86_64.tar.gz")
            set(cmake_dir "cmake-${cmake_version}-linux-x86_64/bin")
          elseif ("${{ runner.os }}" STREQUAL "macOS")
            set(ninja_suffix "mac.zip")
            set(cmake_suffix "macos-universal.tar.gz")
            set(cmake_dir "cmake-${cmake_version}-macos-universal/CMake.app/Contents/bin")
          endif()

          set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
          file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

          set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
          file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

          # Add to PATH environment variable
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
          set(path_separator ":")
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(path_separator ";")
          endif()
          file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${cmake_dir}")

          if (NOT "${{ runner.os }}" STREQUAL "Windows")
            execute_process(
              COMMAND chmod +x ninja
              COMMAND chmod +x ${cmake_dir}/cmake
            )
          endif()

      - name: Install QT
        shell: bash
        run: |
          mkdir -p ./libs/qt6
          pushd ./libs/qt6
          aqt install-qt windows desktop 6.4.1 win64_msvc2019_64
          popd

      - name: Download ccache
        id: ccache
        shell: cmake -P {0}
        run: |
          set(ccache_url "https://github.com/cristianadam/ccache/releases/download/v$ENV{CCACHE_VERSION}/${{ runner.os }}.tar.xz")
          file(DOWNLOAD "${ccache_url}" ./ccache.tar.xz SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ccache.tar.xz)

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: ccache cache files
        uses: actions/cache@v3
        with:
          path: .ccache
          key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ matrix.config.name }}-ccache-

      - name: Configure
        shell: cmake -P {0}
        run: |
          set(ENV{CC} ${{ matrix.config.cc }})
          set(ENV{CXX} ${{ matrix.config.cxx }})

          if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
            execute_process(
              COMMAND "${{ matrix.config.environment_script }}" && set
              OUTPUT_FILE environment_script_output.txt
            )
            file(STRINGS environment_script_output.txt output_lines)
            foreach(line IN LISTS output_lines)
              if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
              endif()
            endforeach()
          endif()

          set(path_separator ":")
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(path_separator ";")
          endif()
          set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")

          execute_process(
            COMMAND cmake
              -S .
              -B build
              -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
              -G Ninja
              -D CMAKE_MAKE_PROGRAM=ninja
              -D CMAKE_C_COMPILER_LAUNCHER=ccache
              -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()

      - name: Build
        shell: cmake -P {0}
        run: |
          set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

          if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
            file(STRINGS environment_script_output.txt output_lines)
            foreach(line IN LISTS output_lines)
              if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
              endif()
            endforeach()
          endif()

          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
          set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
          set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")
          set(ENV{CCACHE_COMPRESS} "true")
          set(ENV{CCACHE_COMPRESSLEVEL} "6")
          set(ENV{CCACHE_MAXSIZE} "400M")
          if ("${{ matrix.config.cxx }}" STREQUAL "cl")
            set(ENV{CCACHE_MAXSIZE} "600M")
          endif()

          execute_process(COMMAND ccache -p)
          execute_process(COMMAND ccache -z)

          execute_process(
            COMMAND cmake --build build --config $ENV{BUILD_TYPE}
            RESULT_VARIABLE result
            OUTPUT_VARIABLE output
            ERROR_VARIABLE output
            ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
          )
          if (NOT result EQUAL 0)
            string(REGEX MATCH "FAILED:.*$" error_message "${output}")
            string(REPLACE "\n" "%0A" error_message "${error_message}")
            message("::error::${error_message}")
            message(FATAL_ERROR "Build failed")
          endif()

      - name: ccache statistics
        shell: cmake -P {0}
        run: |
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
          set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
          set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")

          execute_process(COMMAND ccache -s)

      - name: Run tests
        shell: cmake -P {0}
        run: |
          include(ProcessorCount)
          ProcessorCount(N)

          set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")

          execute_process(
            COMMAND ctest -j ${N}
            WORKING_DIRECTORY build
            RESULT_VARIABLE result
            OUTPUT_VARIABLE output
            ERROR_VARIABLE output
            ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
          )
          if (NOT result EQUAL 0)
            string(REGEX MATCH "[0-9]+% tests.*[0-9.]+ sec.*$" test_results "${output}")
            string(REPLACE "\n" "%0A" test_results "${test_results}")
            message("::error::${test_results}")
            message(FATAL_ERROR "Running tests failed!")
          endif()

      - name: Install Strip
        run: cmake --install build --prefix instdir --strip

      - name: Install QT Deps
        shell: bash
        run: |
          ./libs/qt6/6.4.1/msvc2019_64/bin/windeployqt.exe ./instdir/nautilai.exe

      - name: Pack
        working-directory: build
        run:
          cpack -C Release
          #run: cmake -E tar cfv ../${{ matrix.config.artifact }} .

      - name: Init git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com

      - name: Get/check version
        shell: bash
        run: |
          NAUTILAI_VERSION=$(cat ./src/app/src/banner.h | sed -nE 's/.*"(.*)";/\1/p')
          echo "NAUTILAI_VERSION=${NAUTILAI_VERSION}" >> $GITHUB_ENV
          if [[ $(git  ls-remote --tags origin | grep -e 'refs/tags/${NAUTILAI_VERSION}$') != "" ]]; then echo "Tag ${NAUTILAI_VERSION} already exists" && exit 1; fi;

      - name: Tag
        shell: bash
        run: |
          echo "Tagging ${NAUTILAI_VERSION}"
          git tag -a "${NAUTILAI_VERSION}" -m "release ${NAUTILAI_VERSION}"
          git push origin ${NAUTILAI_VERSION}

      - name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          path: ./build/Nautilai-${{env.NAUTILAI_VERSION}}-win64.exe
          name: "Nautilai-${{env.NAUTILAI_VERSION}}-nsis"

      - name: Upload zip
        uses: actions/upload-artifact@v3
        with:
          path: ./build/Nautilai-${{env.NAUTILAI_VERSION}}-win64.zip
          name: "Nautilai-${{env.NAUTILAI_VERSION}}"

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store Release url
        run: |
          echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

      - uses: actions/upload-artifact@v3
        with:
          path: ./upload_url
          name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "Nautilai Latest MSVC", artifact: "Nautilai.zip", os: ubuntu-latest }
          - { name: "Windows Latest MinGW", artifact: "Windows-MinGW.7z", os: ubuntu-latest }
          - { name: "Ubuntu Latest GCC", artifact: "Linux.7z", os: ubuntu-latest }
          - { name: "macOS Latest Clang", artifact: "macOS.7z", os: ubuntu-latest }
    needs: release

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.config.artifact }}
          path: ./

      - name: Download URL
        uses: actions/download-artifact@v3
        with:
          name: upload_url
          path: ./
      - id: set_upload_url
        run: |
          upload_url=`cat ./upload_url`
          echo ::set-output name=upload_url::$upload_url

      - name: Upload to Release
        id: upload_to_release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}
          asset_content_type: application/x-gtar
